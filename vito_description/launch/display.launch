<launch>
    <!-- LAUNCH INTERFACE -->
    <arg name="gui" default="false" />
    <arg name="robot_name" default="vito"/>
    <arg name="use_rviz" default="true"/>
    <arg name="use_joint_state_publisher" default="true"/>
    <arg name="load_moveit" default="true"/>

    <!-- configure whether to use real/sim hardware -->
    <arg name="head_sim" default="true"/>
    <arg name="left_arm_sim" default="true"/>
    <arg name="left_hand_sim" default="false"/>
    <arg name="right_arm_sim" default="true"/>
    <arg name="right_hand_sim" default="true"/>

    <!-- LAUNCH IMPLEMENTATION -->

    <!-- load the full robot in robot_description, useful for visualizatino, collision detection and planning simultaneously -->
    <param name="robot_description" command="$(find xacro)/xacro.py $(find vito_description)/robot/$(arg robot_name).urdf.xacro"/>

    <!-- Spawn the full robot into Gazebo 
        (doesn't work well with transmissions and plugins, see part spawning below) -->
    <!--node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name)" respawn="false" output="screen"/-->

    <group if="$(arg use_joint_state_publisher)">
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <param name="use_gui" value="$(arg gui)"/>
            <!-- listens to each part -->
            <rosparam param="source_list">[/left_arm/joint_states, /left_hand/joint_states, /right_arm/joint_states, /right_hand/joint_states]</rosparam>
        </node>
    </group>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"  />

    <group if="$(arg use_rviz)">
        <node name="my_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find vito_description)/launch/rviz_config.rviz" output="screen"/>
    </group>

    <!-- load controller configurations -->
    <rosparam file="$(find vito_description)/config/vito_controllers.yaml" command="load"/>

    <!-- load Gazebo environment, without GUI, in case some part requires simulation -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find vito_description)/worlds/simple_environment.world"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="false"/>
        <arg name="headless" value="true"/>
        <arg name="debug" value="false"/>
    </include>

    <!-- load moveit configuration -->
    <include file="$(find vito_moveit_configuration)/launch/move_group.launch">
        <arg name="allow_trajectory_execution" value="true"/>  
        <arg name="fake_execution" value="false"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="false"/>
    </include>

    <!-- select the appropriate robot hardware interface according to the input -->
    <group if="$(arg head_sim)">
    </group>
    <group unless="$(arg head_sim)">
    </group>

    <group ns="left_arm">
        <!-- select the sim/real hardware interface -->
        <group if="$(arg left_arm_sim)">
            <!-- load the part in robot description in current namespace -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find vito_description)/robot/left_arm.urdf.xacro"/>
            <!-- Spawn the part into Gazebo in current namespace -->
            <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model left_arm" respawn="false" output="screen"/>
        </group>
        <group unless="$(arg left_arm_sim)">
            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49939"/>
                <arg name="ip" value="192.168.0.10"/>
            </include>
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <!-- listens to the real/sim part -->
        <rosparam param="source_list">[/left_arm/joint_states]</rosparam>
    </group>
    
    <group ns="left_hand">
        <!-- select the sim/real hardware interface -->
        <group if="$(arg left_hand_sim)">
            <!-- load the part in robot description in current namespace -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find vito_description)/robot/left_hand.urdf.xacro"/>
            <!-- Spawn the part into Gazebo in current namespace -->
            <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model left_hand" respawn="false" output="screen"/>
        </group>
        <group unless="$(arg left_hand_sim)">
            <!-- <include file="$(find soft_hand_hw)/launch/soft_hand_hw.launch">
                <arg name="port" value="ttyUSB0"/>
                <arg name="id" value="1"/>
            </include> -->
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <!-- listens to the real/sim part -->
        <rosparam param="source_list">[/left_hand/joint_states]</rosparam>
    </group>

    <group ns="right_arm">
        <!-- select the sim/real hardware interface -->
        <group if="$(arg right_arm_sim)">
            <!-- load the part in robot description in current namespace -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find vito_description)/robot/right_arm.urdf.xacro"/>
            <!-- Spawn the part into Gazebo in current namespace -->
            <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model right_arm" respawn="false" output="screen"/>
        </group>
        <group unless="$(arg right_arm_sim)">
            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49939"/>
                <arg name="ip" value="192.168.0.10"/>
            </include>
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <!-- listens to the real/sim part -->
        <rosparam param="source_list">[/right_arm/joint_states]</rosparam>
    </group>

    <group ns="right_hand">
        <!-- select the sim/real hardware interface -->
        <group if="$(arg right_hand_sim)">
            <!-- load the part in robot description in current namespace -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find vito_description)/robot/right_hand.urdf.xacro"/>
            <!-- Spawn the part into Gazebo in current namespace -->
            <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model right_hand" respawn="false" output="screen"/>
        </group>
        <group unless="$(arg right_hand_sim)">
            <!-- <include file="$(find soft_hand_hw)/launch/soft_hand_hw.launch">
                <arg name="port" value="ttyUSB0"/>
                <arg name="id" value="2"/>
            </include> -->
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <!-- listens to the real/sim part -->
        <rosparam param="source_list">[/right_hand/joint_states]</rosparam>
    </group>

</launch>
