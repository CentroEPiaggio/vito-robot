<launch>
    <!-- LAUNCH INTERFACE -->
    <arg name="gui" default="false" />
    <arg name="robot_name" default="vito_calib"/>
    <arg name="use_rviz" default="true"/>
    <arg name="use_joint_state_publisher" default="true"/>    

    <!-- configure whether the real hardware is enabled or not -->
    <arg name="head_enabled" default="false"/>
    <arg name="left_arm_enabled" default="true"/>
    <arg name="right_arm_enabled" default="true"/>

    <!-- LAUNCH IMPLEMENTATION -->

    <!-- #### -->

    <!-- load the full robot in robot_description, useful for visualization, collision detection and planning simultaneously -->
    <param name="robot_description" command="$(find xacro)/xacro.py $(find vito_description)/robot/$(arg robot_name).urdf.xacro"/>

    <group if="$(arg use_joint_state_publisher)">
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <param name="use_gui" value="$(arg gui)"/>
            <!-- listens to each part -->
            <rosparam param="source_list">[/left_arm/joint_states,/right_arm/joint_states,/head/joint_states]</rosparam>
        </node>
    </group>

    <param name="publish_frequency" value="100"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"  />

    <group if="$(arg use_rviz)">
        <node name="my_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find vito_description)/launch/rviz_config.rviz" output="screen"/>
    </group>

    <!-- load controller configurations -->
    <rosparam file="$(find vito_description)/config/vito_controllers.yaml" command="load"/>

    <!-- #### -->

    <!-- calibration transformations -->
    <!-- it takes the last calibration performed, you can call calibrate and it will overwrite the yaml file -->
    <include file="$(find calibration)/launch/asus_head_kuka_broadcaster.launch">

    <group if="$(arg head_enabled)">
        <!-- <include file="$(find kit_head_hw)/launch/head_hw.launch">
        </include>
        -->
        <!-- openni launch inclusion -->
    </group>

    <!-- load the controllers in current namespace -->
<!--     <node ns="head" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/> -->

    <group ns="left_arm">
        <group if="$(arg left_arm_enabled)">
            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49948"/>
                <arg name="ip" value="192.168.0.20"/>
            </include>
            <!-- perhaps it is worth remapping joint states -->
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>
    </group>

    <group ns="right_arm">
        <group if="$(arg right_arm_enabled)">
            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49939"/>
                <arg name="ip" value="192.168.0.10"/>
            </include>
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>
    </group>

</launch>
